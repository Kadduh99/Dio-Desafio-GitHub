Introdução ao Android

	1. Apresentar a linguagem e suas aplicabilidades
	2. Apresentar os fundamentos básicos do desenvolvimento Android
	3. Apresentar a sintaxe básica da linguagem Kotlin
	

	Desenvolvimento Android

		* Híbrido x Nativo;
		* Java, Kotlin, Dart, Javascript e C#;
		* Documentação;
		* Primeiros passos;
		* Kotlin First;

		
	Parte 2: Introdução ao Kotlin

		Estrutura da Linguagem 

			* Não ultiza ponto e vírgula 
			* Não possui operador ternário tradicional
			* Type Safe e null Safe
			* Inferência de tipo

		Aplicabilidade
			
			* Android nativo
			* Mobile multiplataforma (KMM)
			* Frontend Web com Kotlin/JS
			* Frameworks:
				- ex: Kvison e Fritz2
			* Backend com target node.js do Kotlin/JS

		Kotlin: vantagens

			* Segurança, estruturada, menos verbosa, mais otimizada, grande relevância no mercado
			* Interoperabilidade com o Java
			* Smart casts e null safety
			* Android é Kotlin first	

	Resumo
		
		* Kotlin é a linguagem oficial para desenvolvimento Android
		* Em desenvolvimento desde 2011
		* Possui diversas vantagens como null check e type safe
		* É 100% interoperável com Java
		* Também desenvolve Frontend e Backend com Koltin/JS e multiplataformas com KMM
	

	Parte 03: Kotlin, sintaxe basica

		Tipos de dados:

			int		boolean		println(Int.MAX_VALUE)
			long		char			println(Float.MAX_VALUE)
			float		byte			println(Long.MAX_VALUE)
			double	short			println(Byte.MAX_VALUE)
			array		null!			println(Short.MAX_VALUE)

				Conversão de dados 

					toByte()
					toShort()
					toInt()
					toLong()
					toFloat()
					toDouble()
					toChar()

		Declaração de variável

			Var (Valor mutável, CamelCase):
				Variável que pode ter seu valor alterado durante o código
	
			Val (Valor imutável, CamelCase):
				Variável que terá somente o valor atribuído (similar ao final em Java)
			
			Const Val (valor imutável, SNAKE_CASE):
				Constante cujo valor é atribuido durante compilação
			

		Possíveis erros:


			var currentAge	
			currentAge = 22 //ERRO!
		
				Uma variael não pode ser declarada sem tipo e sem atribuição
	

			var currentAge = "Ano"
			currentAge = 2021 //ERRO!

				Uma variavel com inferencia de tipo só recebera valores do mesmo tipo que sua primeira atribuição.



		Nullability:

			Qualquer tipo pode ser nulo, porém isso devo ser explicado na declaração de variavel atravez do uso da interrogação (?)

			A inferencia de tipo não atribui nullability

		
		Operadores Aritméticos

		
			soma: a + b
				a.plus(b)

			subtração: a - b
				a.minus(b)

			multiplicação: a * b
				a.times(b)

			divisão: a / b
				a.div(b)

			resto: a % b
				a.mod(b)


		- Os operadores podem ser chamados tanto como expressão quanto como comendo. O resultado será o mesmo.

		- A função de soma também funciona para concatenar Strings



			maior/menor:a > b ou a < b								a.compareTo(b) > 0 ou a.compareTo(b) < 0

			maior/menor igual: a >= b ou a <= b
				a.compareTo(b) >= 0 ou a.compareTo(b)< = 0 

			igual: a == b
				a.equals(b)
				
			diferente: a != b
				!(a.equals(b))

		- Os comandos compareTo retornam os valores -1 (menor que), 0 (igual) ou 1 (maior). Já os operadores retornam valores booleanos (False ou True).

		- O comando equals retorna um booleano (False ou True).



	Operadores Lógicos

			Função e expressão	Comando

				E (&&)		(expressão 1) and (expressão2)
				Ou (||)		(expressão 1) our (expressão2)

		- Quando utiliza-se o comando, é recomendado colocar a expressão entre parênteses



	Operadores In e range

			Função e Expressão

				contem (In)
				não contem (!In)
				range/Faixa de valores (!Int..!Int)

		- Se o valor está presente em uma lista ou uma faixa (range) de valores
		
		- Range cria um intervalo de valores que inicia no primeiro parâmetro e acaba no segundo 


	Manipulação de Strings

		- Strings possuem diversos métodos associoados
		- Indexação, concatenação, comparação, formatação
		- Pode ser concatenada com plus/+
		- Também é tratada como um array de Char
	

		Indexação
			
			* String como array
			* First(), last(), String.length, String[index]

		Concatenação
		
			* Para concatenar duas strings ou plus/+ pode ser utilizado
			
			* Para concatenar uma variável a uma String, os símbolos ${} devem ser inseridos


		Formatação


		Capitalização			Função 				Metodos

	Capitalização de			Alterar o formatação		capitalize(),toUpperCase()
	strings				entre letras minúsculas		toLowerCase(), and
						e maiúscula				decapitalize()
--------------------------------------------------------------------------------------------
	
	Remoção de 				Remove espaços vazios e 	trimEnd(), trimStart(),
	espaços 				caracteres inadequados		trim()
						para impressão
--------------------------------------------------------------------------------------------
	
	Substituição de			Substituir caracteres por	replace(x,y) 
	caracteres				outros
--------------------------------------------------------------------------------------------

	Formatação 				Formatar outros valores		"padrão ${valor}".
						para um padrão de string	format(valor)



	Empty x Blank

	
		- Metodos de comparação
		- String esta vaiza, em branco ou é nula ?

			Se o tamanho da string (s.length) for 0 esta empty e blank

			Se o tamanho for > 0 mas todos os caracteres são espaços em 
branco, esta blank, mas não empty


		Empty						Blank

	val s= ""					val s = "  "
	 println(s.isEmpty())			 println(s.isEmpty())
	 //true					 //false
	 println(s.isBlank())			 println(s.isBlank())
	 //true					 //true
	 println(s.isNullOrBlank() || 
		   s.isNullOrEmpty())
	 //true




		Funções
	
	- Prefixo Fun nomeDaFunção(nome:Tipo):TipoRetorno{}
	- Funções anônimas, single-line, inline, extensões, 
	  Lambdas, ordem superior.
	
	private fun getFullName(name:String, lasName:String):String {
		val fullname = "$name $lastName"
		return fullname
	}

	private fun getFullName(name:String, lastName:String):String{
		return "$name $lastName"
	}

	private fun getFullName(name:String, lastName:String)= "$name $lastName"


		Funções de Ordem Superior

	- Recebem outra função ou lambda por parâmetro.
	
	- Bastante úteis para a generalização de funções e tratamento de erros

		val x = calculate(12,4, ::sum)
		val y = calculate(12,4){a,b -> a*b}

	
	ex:

	fun main() {	
   	 	val z: Int
     	z = calculate(34, 90){a,b -> a-b}
      	println(z)
	}

	fun sum(a1:Int, a2:Int) = a1.plus(a2)

	fun calculate(n1:Int,n2:Int, operation:(Int,Int)->	Int):Int{
    	val result = operation(n1,n2)
    	return result
	}


	Funções single-line e Funções/Extensões



		-Prefixo Fun nomeDaFuncao(nome:Tipo)= retorno
		-Função de uma única linha
		-Infere o tipo de retorno

	
			private fun gettFullname(name:String, 				lastName:String) = "$name $lastName"

		
	Funções/Extensões

		
		-Prefixo Fun Tipo.nomeDaFuncao():
		-Cria uma função que só pode ser chamada por um tipo específico, cujo o valor pode ser referenciado dentro da função atravez da apalvra this.


	Estrutura de controle

		-if/esle, when, elvis operator
		-Pode ser utilizado tanto para controle quanto para atribuição
		-Pode ser encadeado com múltiplas estruturas.

	
		if/esle:

			if(expressão){
				//bloco de codigo
			}else if (expressão2){
				//bloco de codigo
			}else {
				//bloco de codigo	
			}


		when:


			when {
				case1 -> {}
				case2 -> {}
				case3 -> {}
				else -> {}
				}

	
		elvis operator:

			val a:Int? = null
			val number = a ?: 0


		

	Atribuição


		-O valor atribuído tem que estar na última linha do bloco
		-A conficional pode não usar chavez se só fizer a atribuição

		
		ex: 
	
		val MaxValue = if (a > b) a else if (a < b) b else b

			val minValue = if (a > b){
				println("b($b) e o menor valor")
				b	
			}else if(a < b){
				println("a($a)e o menor valor")
				a
			}else{
				println("os valores são iguais")
				b
			}


	
	When

	-Equivalente ao switch de outras linguagens
	-Aceita tanto valores quanto condicionais 
	-Aceita range como case

		when {
			a > b -> {}
			a != b && a > c -> {}
			b == 0 -> {}
			else -> {}
			}

		when(year)
			-4000.. 475 -> //Antiguidade
			476.. 1452 -> //Medieval
			1453.. 1789 -> //Moderna
				currentYear -> //ano atual
			}


	Elvis Operator


		-O mais próximo que a linguagem possui de um operador ternário
		-Verifica se um valor é nulo e apresenta uma opção caso seja 
		-Pode ser encadeado

		ex:
		
		val a:Int? = null
		val c:Int? = 9
		var number = a?: b?: 0

	Nesse caso, se o valor de a não for nulo, number recebe a. Se o valor de a for nulo e b não for nula, number recebe b se a e b forem nulos, number recebe 0.




		Repetição

	-While, do..while, for e forEach
	-Estruturas similares ás convencionais em outras linguagens
	-Aceita os comandos in, range, until, downTo, e step



		while, do, for
	
	while (condição){}		


	do{					
		//bloco	
	} while (condição)


	for ( i in 0..20 step 2) {
		println(i)
	}


			For

	*for(varivellndexadora in/until/downTo faixa de valores/condicional step intervalo)
	*in: conta do valor inicial até o valor final estabelecido
	*Until: conta do valor atual até o valor estabelecido menos 1
	*DownTo: conta de maneira decrescente
	*Step: determina o intervalo da contagem

	
	for(i in 0..20 step 2) {
		println(i)
	}
---------------------------------------------------------

	for(i in 0 until 10) {
		println(i)
	}

---------------------------------------------------------
	
	for (i in 10 downTo 0) {
		println(i)
	}

---------------------------------------------------------

	var text= "Kotlin"

	for (letter in text) {
		println(letter)
	}
---------------------------------------------------------

	
	


















